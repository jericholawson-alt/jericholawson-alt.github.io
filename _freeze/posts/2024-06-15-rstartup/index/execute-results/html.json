{
  "hash": "2ce0c4415d4bd913c010943bc3bf3dd4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Customise your R startup message\nauthor: Dr. Mowinckel\ndate: '2024-06-15'\ncategories: []\ntags:\n  - r\n  - startup\n  - pride\nimage: \"startup.png\"\nsummary: |\n  We all know the R startup message. It tells us the version\n  of R we are running, the date, the platform we are running\n  on, and some informative tips on using R.\n  When you've been using R a while, though, it get old.\n  Let me show you how you can customise your startup message!\n---\n\n\nI love customizing things. \nI seem to never let anything I work with that can be customized, not be customized. \nColours of the software, websites I work on. \nI just like having things the way *I* like having things.\n\nThis ofcourse, also extends to R. \nThe R startup message is just, so much! \nAnd when you have been working with it so long, it's just noise.\n\nI mean, look at this:\n\n``` r\nR version 4.3.3 (2024-02-29) -- \"Angel Food Cake\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: aarch64-apple-darwin20 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n```\n\nOk, it's all informative and meaningful information. \nYou just don't need that information every time, and wouldn't it be fun if we could make it more personal?\n\nI had wanted to do this for a while, but never really got around to it. \nMostly because I tried finding ways of clearing the startup message, but just couldn't figure it out.\n\nEnter Danielle Navarro and her amazingness. \nDanielle is amazing in a multitude of ways, I respect and look up to her for so many reasons, coding and not. \nShe had a post on mastodon with a custom startup message, and I was like, \"I need to do that!\".\n\n<iframe src=\"https://fosstodon.org/@djnavarro/110541882131342960/embed\" class=\"mastodon-embed\" style=\"max-width: 100%; border: 0\" width=\"400\" allowfullscreen=\"allowfullscreen\"></iframe><script src=\"https://fosstodon.org/embed.js\" async=\"async\"></script>\n\n## The user `.Rprofile`\n\nThe way to customise this is through the `.Rprofile` file. This file is a script that is run every time you start R. \nIt can be used to set up your environment, load packages, and do whatever you want to do every time you start R.\n\n> Be cautious! \n> Don't load packages in the `.Rprofile` if you want to work reproducibly. \n> It's better to load packages in your script, so it's transparent to anyone wanting to run it what it need.\n\nIf you've used R a while, you have likely already tampered a little with this file. \nMost commonly, we use it to set the default CRAN mirror, or to set the default options for R with the `options()` function.\n\nThere are two `.Rprofile` files you can use. \nOne is in your home directory, and one is in the R project directory. \nThe one in your home directory is the one you should use for anything you want to always apply to your R session. \nThe project `.Rprofile` is for things you want to apply only to that project.\n\n> Note! If you have a project Rprofile, the home Rprofile will not be executed. \n> This is to avoid conflicts between the two. \n> There are ways around this, but I'm not going to recommend them here. \n> Mostly because it's an advanced thing and you aught to have a good reason for doing it.\n\nYou can access these files easily with the {usethis} package.\n\n``` r\n# default opens user profile\nusethis::edit_r_profile()\n\n# opens the project profile\nusethis::edit_r_profile(scope = \"project\")\n```\n\n## The common problem - CRAN mirror\n\nFor instance, in my `.Rprofile` I set not only CRAN mirror, but also the `ggseg` and `lcbc` repositories, from the [R-universe](https://ggseg.r-universe.dev/builds) which contain important packages for me that don't exist on CRAN. \nThose settings can be set with the `options` function in R, in the `repos` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the default CRAN mirror\noptions(\n  repos = c(\n    ggseg = 'https://ggseg.r-universe.dev',\n    lcbc = 'https://lcbc-uio.r-universe.dev',\n    CRAN = \"https://cloud.r-project.org/\"\n  )\n)\n```\n:::\n\n\nHaving this set means I don't have to set the repositories every time I install a package. \nI can just use `install.packages` and it will know where to look. \nIt will look for the package I ask for in the order the repositories are listed. \nWhich is super convenient, and saves me a lot of time.\n\n## Your daily praise.\n\nBut that was not the fun customisation I was talking about. That was just a useful customisation.\n\nLet us maybe have a little praise every time we start R! \nDays can be long and hard, and a little praise can go a long way.\n\nWe can do this with the {praise} package. \nThe {praise} package contains a list of praises that you can use to get a random praise every time you run the function `praise()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npraise::praise()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"You are beautiful!\"\n```\n\n\n:::\n:::\n\n\nSee? Isn't that nice? And it will be a different phrase every time you start R, it's a nice little boost.\n\nTo make this happen, we can add the following code to our `.Rprofile` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(\"paise\" %in% utils::installed.packages()){\n  cat(\n    \"\\nHey Mo!\",\n    praise::praise(),\n    sep = \"\\n\"\n  )\n}\n```\n:::\n\n\nThere is a little to unpack in this code. \nFirstly, we check if the package `praise` is installed. \nI do this because R will error on startup if it is not and we don't want that. \nSo if you are doing this on a new computer etc, you will need to install the package first to actually get your little piece of daily praise.\n\nWe then use the `cat` function to print out the praise. \nBecause we want it to print in the console, not be returned as a value `## [1] \"praise\"`. \nWe use the `sep` argument to separate the praise from the \"Hey Mo!\" string, and we want it to be a new line, which is indicated with the `\\n` character.\n\nThat is our first piece of fun customisation! \nBut that will still print the normal startup message, and then append our own praise at the end.\n\n``` r\nR version 4.3.3 (2024-02-29) -- \"Angel Food Cake\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: aarch64-apple-darwin20 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\nHey Mo!\nYou are awesome!\n```\n\n## Clearing the console\n\nWe need a bit of code that clears the console before we print our praise. \nThis will remove the old message before printing the new one.\n\n``` r\n# Clear if running in terminal\nsystem2(\"clear\")\n# Clear if running in RStudio\ncat(\"\\014\")\n```\n\nHere we have two different ways to clear the console, because I interact with R in several ways. \nI use RStudio, but I also use the terminal (and vscode), and I want the console to be cleared in both cases. \nThese two lines of code will clear the console in both cases.\n\n## Print some system information\n\nNow that we have cleared the console, we can print some system information. \nThis information is useful to have, and it's nice to see it every time you start R. \nIt can be useful to know what version of R you are running, what operating system you are on, and what time it is. \nThis can be useful for debugging, and it's just nice to know.\n\nTo do this, I'm going to use the {cli} package, which can print nice colours, bullet points and all sorts of fun things!\n\n``` r\nif(\"cli\" %in% utils::installed.packages()){\n  cli::cli_text(R.version.string)\n  cli::cli_text(\"Running under {utils::osVersion}\")\n  cli::cli_text(\"System time is {Sys.time()}\")\n}\n```\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-5.svg)\n\nAs with praise, we start with checking if the package is installed. \nJust to be sure we don't get an error on startup.\n\nThen we'll print the R version, the operating system version, and the system time.\n\nNow that we have some meaningful system information, I also like to print my library paths as shown in the `.libPaths()` function. \nThis is useful to know where your packages are installed. \nIn particular, this will also help expose if you are in an {renv} project, as the library paths will be different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exposes where library paths are set to\n.libPaths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\"\n```\n\n\n:::\n:::\n\n\nNow that we know where out libraries are set to, we can print this information in a nice way using the {cli} package, with `cli_bullets`.\n\n``` r\ncli::cli_bullets(.libPaths())\n```\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-7.svg)\n\nNow, I can keep it to that, but I'm gonna over-think it. \nI want my bullets to actually start with bullets! \nIn {cli} we can accomplish this having each element in the vector have an asterisk as its name. \nThis will make the bullets appear as bullets in the console. \nTo accomplish this, I'm going to use the `setNames` function from the {stats} package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats::setNames(.libPaths(),\n                  rep(\"*\", length(.libPaths())\n                  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                                     * \n\"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\" \n```\n\n\n:::\n:::\n\n\nNow that we have all the pieces, we can feed them to cli_bullets.\n\n```r\ncli::cli_bullets(\n  stats::setNames(.libPaths(),\n                  rep(\"*\", length(.libPaths())\n                  )))\n```\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-9.svg)\n\nNow we have a nice list of library paths, with bullets, in the console. \nLet's put all we have for now together in our `.Rprofile` file.\n\n``` r\nsystem2(\"clear\")\ncat(\"\\014\")\n```\n\n```r\ninstl <- utils::installed.packages()\nif(\"cli\" %in% instl){\n  cli::cli_text(R.version.string)\n  cli::cli_text(\"Running under {utils::osVersion}\")\n  cli::cli_text(\"System time is {Sys.time()}\")\n  cli::cli_text(\"Library paths set to\")\n  cli::cli_bullets(\n    stats::setNames(\n      .libPaths(),\n      rep(\"*\", length(.libPaths())\n      )))\n} # end if cli installed\n\ncat(\"\\n\")\nif(\"praise\" %in% instl){\n  cat(\n    \"\\nHey Mo!\",\n    praise::praise(),\n    sep = \"\\n\"\n  )\n} # end if praise installed\n```\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-10.svg)\n\n## A colour bar, because we can!\n\nThe last bits of magic in my profile are a colour bar.\nMy colourbar is R-Ladies purple, except for June, when its rainbow pride colours.\nIt just makes my Pride month happier to see a rainbow in my console.\n\nBut getting there is a little chore! \nLet us start with the single colour purple bar, then expand to the pride bar later.\nWe first make a vector of 10 purple colours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolour <- rep(\"#88398a\", 10)\ncolour\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"#88398a\" \"#88398a\" \"#88398a\" \"#88398a\" \"#88398a\" \"#88398a\" \"#88398a\"\n [8] \"#88398a\" \"#88398a\" \"#88398a\"\n```\n\n\n:::\n:::\n\n\nNow, we have to do some fancy work to make this into a colour bar. \nWe have to convert the hex colours to ANSI colours. \nThis is done using the `cli::make_ansi_style` function.\nWe can use `sapply` to apply this function to each element in the vector. \nIf you don't know about the `apply` functions, then [I have a post on that](blog/2022/lets-get-applying). \nIn short, its a type of loop, that applies the same function to all values of a vector.\n\n```r\ncolour <- rep(\"#88398a\", 10)\nlapply(colour, cli::make_ansi_style) \n```\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-12.svg)\n\nNow we have a vector of ANSI colours, next we need to apply them to a character. \nTo make a colourbar, I'm going to use the ANSI character for 'LOWER THREE EIGHTHS BLOCK', which is a thick underscore, and I'm going to make it 6 characters long for each colour.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(\"\\u2583\", 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"▃\" \"▃\" \"▃\" \"▃\" \"▃\" \"▃\"\n```\n\n\n:::\n:::\n\n\nTo make a single line colour bar, we can use `paste0` to paste the colour and the block together.\nWe can use `collapse = \"\"` to make it a single string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthick_bar <- paste0(rep(\"\\u2583\", 6), collapse = \"\")\nthick_bar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"▃▃▃▃▃▃\"\n```\n\n\n:::\n:::\n\n\nHere is the true tricky part. \nThe ansi-colour style we have is actually a list of functions that can be applied to a string.\n\n```r\nthick_bar <- paste0(rep(\"\\u2583\", 6), collapse = \"\")\nstyle <- cli::make_ansi_style(\"#88398a\") \nstyle(thick_bar)\n```\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-15.svg)\n\nLastly, we need to `cat` this again, to print it nicely to the console.\n\n```r\nthick_bar <- paste0(rep(\"\\u2583\", 6), collapse = \"\")\nstyle <- cli::make_ansi_style(\"#88398a\") \ncat(style(thick_bar))\n```\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-16.svg)\n\nNow, since we want a longer bar, we need to apply across all the 10 colours specified.\n\n```r\nthick_bar <- paste0(rep(\"\\u2583\", 6), collapse = \"\")\ncolour <- rep(\"#88398a\", 10)\nlapply(colour, cli::make_ansi_style) |>\n  lapply(\\(x){\n    cat(x(thick_bar))\n  })\n```\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-17.svg)\n\nThe colourbar looks great. But all those NULLs, Ack! \nWe can use `invisible` to suppress the output of the `cat` function.\n\n```r\nthick_bar <- paste0(rep(\"\\u2583\", 6), collapse = \"\")\ncolour <- rep(\"#88398a\", 10)\n\ninvisible(\n  lapply(colour, cli::make_ansi_style) |>\n    lapply(\\(x){\n      cat(x(thick_bar))\n    })\n)\n```\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-18.svg)\n\nNow we have a nice purple colour bar. \nWe are going to make the pride bar now. \nWe need to make a vector of the pride colours. \nI'm going to use the hex codes for the pride flag colours.\n\n```r\nthick_bar <- paste0(rep(\"\\u2583\", 6), collapse = \"\")\ncolour <- c(\"#e50000\", \"#ff8d00\", \"#ffee00\",\n                    \"#028121\", \"#004cff\", \"#770088\",\n                    \"#ffffff\", \"#ffafc7\", \"#73D7EE\",\n                    \"#613915\", \"#000000\")\ninvisible(\n  lapply(colour, cli::make_ansi_style) |>\n    lapply(\\(x){\n      cat(x(thick_bar))\n    })\n)\n```\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-19.svg)\n\nNow, we need something that will detect that we are in the month of June, so we can toggle the pride colours rather than the purple.\n\nThe `Sys.Date()` function will give us the current date, and we can discern that its June by looking for \"-06-\" in the date. \nWe can use this logic in the `grepl` function, which will return `TRUE` if the pattern is found in the string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.Date() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-06-10\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngrepl(\"-06-\", Sys.Date() )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nPutting it all together as chunk together, we get a piece of code that will create our custom colourbar.\n\n```r\nthick_bar <- paste0(rep(\"\\u2583\", 6), collapse = \"\")\ncolour <- rep(\"#88398a\", 10)\nif(grepl(\"-06-\", Sys.Date() )){\n  colour <- c(\"#e50000\", \"#ff8d00\", \"#ffee00\",\n              \"#028121\", \"#004cff\", \"#770088\",\n              \"#ffffff\", \"#ffafc7\", \"#73D7EE\",\n              \"#613915\", \"#000000\")\n}\ninvisible(\n  lapply(colour, cli::make_ansi_style) |>\n    lapply(\\(x){\n      cat(x(thick_bar))\n    })\n)\n```\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-21.svg)\n\nAlrighty!\nWe now have can make a file that:\n\n1. Clears the console\n1. Prints system info in a nice consise way\n1. Prints a fun colourbar\n1. Gives a random praise\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(interactive()){\n  system2(\"clear\")\n  cat(\"\\014\")\n  instl <- utils::installed.packages()\n  if(\"cli\" %in% instl){\n    cli::cli_text(R.version.string)\n    cli::cli_text(\"Running under {utils::osVersion}\")\n    cli::cli_text(\"System time is {Sys.time()}\")\n    cli::cli_text(\"Library paths set to\")\n    cli::cli_bullets(\n      stats::setNames(.libPaths(),\n                      rep(\"*\", length(.libPaths())\n                      )))\n    thick_bar <- paste0(rep(\"\\u2583\", 6), collapse = \"\")\n    (function(){\n      colour <- rep(\"#88398a\", 10)\n      if(grepl(\"-06-\", Sys.Date() )){\n        colour <- c(\"#e50000\", \"#ff8d00\", \"#ffee00\",\n                    \"#028121\", \"#004cff\", \"#770088\",\n                    \"#ffffff\", \"#ffafc7\", \"#73D7EE\",\n                    \"#613915\", \"#000000\")\n      }\n      invisible(\n        lapply(colour, cli::make_ansi_style) |>\n          lapply(\\(x){\n            cat(x(thick_bar))\n          })\n      )\n    })()\n  }\n  cat(\"\\n\")\n  if(\"praise\" %in% instl){\n    cat(\n      \"\\nHey Mo!\",\n      praise::praise(),\n      sep = \"\\n\"\n    )\n  }\n  rm(instl, thick_bar, colour)\n}\n```\n:::\n\n\n![](index.markdown_strict_files/figure-markdown_strict/unnamed-chunk-23.svg)\n\n\nThere you have it!\nThe piece of (rather long) code that customised my R startup to something shorter, more informative and also that makes me smile every time.\n\nDo you customise your startup in any way, or put anything in particular in your `.Rprofile`? \n\nThis post is cross-posted from my [blog](https://drmowinckels.io/blog/2024/rproject/).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}