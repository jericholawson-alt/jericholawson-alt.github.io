---
title: "Messy Excel Tables"
author: "Zane Dax (She/They)"
date: "May 26, 2022"
image: excel-img.png
description: "Clean messy heavily formatted Excel spreadsheets and tables."
categories: [excel, data tables, analysis]
format: html
editor: visual
theme: vapor
draft: true
tags: 
  - excel
  - data-table
---

## Messy Excel spreadsheets

Finding LGBTQ datasets in the world, I often find `.xlsx` files, these are often very messy or formatted in a way that is less than ideal. This blog will show how to convert the Excel spreadsheet into a `tidyverse` dataset.

## Book Tutorial

We will first use a eBook tutorial **Spreadsheet Munging Strategies** but I will provide details on each step of the process. The data tables for this tutorial are Australian Bureau of Statistics, download the data [here](https://github.com/nacnudus/smungs/blob/master/inst/extdata/ozmarriage.xlsx?raw=true).

The data tables look like this ![table 1](AUS-table1.png)

![table 2](AUS-table2.png) Notice on the left side the rows have nested State Divisions with regions, and the columns are response and participants.

### Libraries

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(readxl)
library(tidyxl)
# install.packages('unpivotr')
library(unpivotr)
```

### Data tables

```{r}
cells = xlsx_cells("ozmarriage.xlsx")
cells

# allows for getting table formatting 
formats = xlsx_formats("ozmarriage.xlsx")
```

The whole Excel data is 4699 rows and 21 variables, all table (sheets) combined. We want to just get table 1.

```{r}
# Table 1
cells %>% 
  filter(sheet == "Table 1", row >= 5L, !is_blank)
```

So far this looks like nothing like the picture, so we will need pull out the column headers by using the `unpivotr::behead()` function to chop away all that formatting. The image below will help make sense of what is being beheaded.

![table 2](AUS-step.png)

The image shows Table 2 as it is similar to table 1, except for the nested regions under state. The column names we will use are basic generalized variables of what the columns store, name the column `response` instead of "response clear" and `population` instead of "eligible participants". The regions under `state` will be moved.

### Step 2

Using the image above as a guide in what we are chopping is the response and population columns, the direction of where they are located is important to have. These beheaded columns are at the end of the data table, but will be moved soon.

```{r}
cells %>% 
  filter(sheet == "Table 1", row >= 5L, !is_blank) %>% 
  behead("up-left",'population') %>% 
  behead('up-left','response')
```

### Step 3

This step we are grabbing the `no.` and `%` columns underneath the response and population columns. The unit column will be nested and is placed at the end of the data table.

```{r}
cells %>% 
  filter(sheet == "Table 1", row >= 5L, !is_blank) %>% 
  behead("up-left",'population') %>% 
  behead('up-left','response') %>% 
  behead('up','unit')
```

### Step 4

This step is grabbing the states located on the left side. The left location is left of the formatted columns, there will often be 2 left columns next to each other, yet the locations for `behead()` are left. The state is placed at the end of the data table.

```{r}
cells %>% 
  filter(sheet == "Table 1", row >= 5L, !is_blank) %>% 
  behead("up-left",'population') %>% 
  behead('up-left','response') %>% 
  behead('up','unit') %>% 
  behead('left','state') %>% 
  arrange(row, col)
```

### Step 5

In this step we arrange the data table by row and column, selecting the columns we want from the Excel data table. The columns `row`, `data_type` and `numeric` are required here, before the selection of the columns. You will see that unit remains nested.

```{r}
cells %>% 
  filter(sheet == "Table 1", row >= 5L, !is_blank) %>% 
  behead("up-left",'population') %>% 
  behead('up-left','response') %>% 
  behead('up','unit') %>% 
  behead('left','state') %>% 
  arrange(row, col) %>% 
  select( row, data_type, numeric, # required columns
          state, population, response, unit
          )
# the rows of states are now a column !!!
```

### Step 6

In step 5 we grabbed the columns we wanted, along with the ones we rather not have like the row and data_type. The column numeric held the numeric data we care about. To unnest the unit column that has `%` and `no.`, we use `spatter()` function, which will move them into separated columns.

This step we want the units separated and to have state as first column. We have a tidy data table, which could be saved as a `.csv` file. We selected our columns in the order we want, `spatter()` the nested column into separate column, and to drop the row column.

```{r}
cells %>% 
  filter(sheet == "Table 1", row >= 5L, !is_blank) %>% 
  behead("up-left",'population') %>% 
  behead('up-left','response') %>% 
  behead('up','unit') %>% 
  behead('left','state') %>% 
  arrange(row, col) %>% 
  select( row, data_type, numeric, state, population, response, unit) %>% 
  spatter(unit) %>% # breaks up the % no. into columns
  select(-row)
```

# Conclusion

This tutorial was my version of a eBook tutorial on cleaning Excel spreadsheets, broken down into steps with some explanations on each function. Although this blog showed how to do Table 1, the same process is applied to other messy Excel spreadsheets. I recommend going in steps as sometimes you `unhead()` a column which sometimes has nested data meant for another column.
